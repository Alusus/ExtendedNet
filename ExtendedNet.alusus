
    import "Srl/Net";
@merge module Srl {
    @merge module Net {
        class ExtendedNet {
            def url: String = "";
            def authKey: String = "";
            def authType: String = "";
            def contentType: String = "application/json";
            def result: String = "";

            handler this~init(url: String, authKey: String, authType: String, contentType: String) {
                this.url = url;
                this.authKey = authKey;
                this.authType = authType;
                this.contentType = contentType;
            }

            handler this~init(url: String, authKey: String, authType: String) {
                this.url = url;
                this.authKey = authKey;
                this.authType = authType;
            }

            handler this~init(url: String, authKey: String, contentType: String) {
                this.url = url;
                this.authKey = authKey;
                this.contentType = contentType;
            }

            handler this~init(url: String) {
                this.url = url;
            }

            handler this.putFile(filename: String): Bool {
                def curlHandle: ptr[Curl];
                def resultCode: Int;
                curlHandle = CurlEasy.init();
                if curlHandle == 0 return false;
                def file: ptr[Srl.Fs.File];
                file = Srl.Fs.openFile(filename.buf, "rb");
                if file == 0 {
                    CurlEasy.cleanup(curlHandle);
                    return false;
                }

                Srl.Fs.seek(file, 0, 2);
                def size: ArchInt = Srl.Fs.tell(file);
                Srl.Fs.seek(file, 0, 0);
                CurlEasy.setOpt(curlHandle, CurlOpt.URL, this.url.buf);
                def httpHeaders: ptr[CurlSlist] = 0;
                def contentTypeHeader: String = "";
                if this.authKey != String("") and this.authType == String("") {
                    CurlEasy.setOpt(curlHandle, CurlOpt.USERPWD, this.authKey.buf);
                } else if this.authKey != String("") {
                    def authHeader: String = "";

                    authHeader = String.format("Authorization: %s %s", this.authType, this.authKey);
                    httpHeaders = CurlSlist.append(httpHeaders, authHeader.buf);
                }
                contentTypeHeader = String.format("Content-Type: %s", this.contentType.buf);
                httpHeaders = CurlSlist.append(httpHeaders, contentTypeHeader.buf);
                CurlEasy.setOpt(curlHandle, CurlOpt.HTTPHEADER, httpHeaders);
                CurlEasy.setOpt(curlHandle, CurlOpt.UPLOAD, 1);
                CurlEasy.setOpt(curlHandle, CurlOpt.READDATA, file);
                CurlEasy.setOpt(curlHandle, CurlOpt.USERAGENT, "ALUSUS NETWORK LIBRARY");
                CurlEasy.setOpt(curlHandle, CurlOpt.INFILESIZE_LARGE, size);
                CurlEasy.setOpt(curlHandle, CurlOpt.VERBOSE, 1);
                resultCode = CurlEasy.perform(curlHandle);
                CurlEasy.cleanup(curlHandle);
                Srl.Fs.closeFile(file);
                if resultCode == CurlCode.OK return true
                else return false;
            }

            handler.post(postedData: ptr[array[Char]]): Bool {
                def curlHandle: ptr[Curl];
                def resultCode: Int;
                def result: ptr[ptr];
                def resultCount: ptr[int];
                result~cnt = 0;
                resultCount~cnt = 0;
                def content: ResponseContent;
                content.data = 0;
                content.size = 0;
                curlHandle = CurlEasy.init();
                if (curlHandle == 0) return false;
                CurlEasy.setOpt(curlHandle, CurlOpt.URL, this.url.buf);
                CurlEasy.setOpt(curlHandle, CurlOpt.POSTFIELDS, postedData);
                def httpHeaders: ptr[CurlSlist] = 0;
                def contentTypeHeader: String = "";
                if this.authKey != String("") and this.authType == String("") {
                    CurlEasy.setOpt(curlHandle, CurlOpt.USERPWD, this.authKey.buf);
                } else if this.authKey != String("") {
                    def authHeader: String = "";

                    authHeader = String.format("Authorization: %s %s", this.authType, this.authKey);
                    httpHeaders = CurlSlist.append(httpHeaders, authHeader.buf);
                }
                contentTypeHeader = String.format("Content-Type: %s", this.contentType.buf);
                httpHeaders = CurlSlist.append(httpHeaders, contentTypeHeader.buf);
                CurlEasy.setOpt(curlHandle, CurlOpt.HTTPHEADER, httpHeaders);
                CurlEasy.setOpt(curlHandle, CurlOpt.WRITEFUNCTION, responseCallback~ptr);
                CurlEasy.setOpt(curlHandle, CurlOpt.WRITEDATA, content~ptr);
                CurlEasy.setOpt(curlHandle, CurlOpt.USERAGENT, "ALUSUS NETWORK LIBRARY");
                CurlEasy.setOpt(curlHandle, CurlOpt.FOLLOWLOCATION, 1);
                CurlEasy.setOpt(curlHandle, CurlOpt.SSL_VERIFYPEER, 0);
                resultCode = CurlEasy.perform(curlHandle);
                CurlEasy.cleanup(curlHandle);
                if resultCode == CurlCode.OK {
                    // Zero terminate the data.
                    result~cnt = Srl.Memory.realloc(content.data, content.size + 1);
                    result~cnt~cast[ptr[array[Word[8]]]]~cnt(content.size) = 0;
                    resultCount~cnt = content.size;
                    this.result = String.format("%s", result);
                    return true;
                } else {
                    return false;
                }
            }

            handler.post(postedData: ptr[array[Char]], outputFilename: ptr[array[Char]]): Bool {
                def curlHandle: ptr[Curl];
                def resultCode: Int;
                def result: ptr[ptr];
                def resultCount: ptr[int];
                result~cnt = 0;
                resultCount~cnt = 0;
                def content: ResponseContent;
                content.data = 0;
                content.size = 0;
                curlHandle = CurlEasy.init();
                if (curlHandle == 0) return false;
                CurlEasy.setOpt(curlHandle, CurlOpt.URL, this.url.buf);
                CurlEasy.setOpt(curlHandle, CurlOpt.POSTFIELDS, postedData);
                def httpHeaders: ptr[CurlSlist] = 0;
                if this.authKey != String("") and this.authType == String("") {
                    CurlEasy.setOpt(curlHandle, CurlOpt.USERPWD, this.authKey.buf);
                } else if this.authKey != String("") {
                    def authHeader: String = "";
                    def contentTypeHeader: String = "";
                    authHeader = String.format("Authorization: %s %s", this.authType, this.authKey);
                    httpHeaders = CurlSlist.append(httpHeaders, authHeader.buf);
                }
                def file: ptr[Srl.Fs.File];
                file = Srl.Fs.openFile(outputFilename, "wb");
                if file == 0 {
                    CurlEasy.cleanup(curlHandle);
                    return false;
                }

                CurlEasy.setOpt(curlHandle, CurlOpt.POSTFIELDS, postedData);
                CurlEasy.setOpt(curlHandle, CurlOpt.WRITEDATA, file);
                CurlEasy.setOpt(curlHandle, CurlOpt.USERAGENT, "ALUSUS NETWORK LIBRARY");
                CurlEasy.setOpt(curlHandle, CurlOpt.FOLLOWLOCATION, 1);
                CurlEasy.setOpt(curlHandle, CurlOpt.SSL_VERIFYPEER, 0);
                resultCode = CurlEasy.perform(curlHandle);
                CurlEasy.cleanup(curlHandle);
                Srl.Fs.closeFile(file);
                if resultCode == CurlCode.OK return true
                else return false;
            }

            handler.smtp(emailArray: Array[Srl.String], password: CharsPtr): Bool {
                def curlHandle: ptr[Curl];
                def resultCode: Int;
                def recipients: ptr[CurlSlist] = 0;
                def content: _Content;
                content.data = 0;
                content.size = 0;

                class _UploadStatus {
                    def bytesRead: ArchInt;
                    def emailString: String;
                }

                func _smtpCallbackFunction(chunk: ptr[char], size: ArchInt, count: ArchInt, userp: ptr): ArchInt {
                    def uploadCtx: ptr[_UploadStatus];
                    uploadCtx = userp~cast[ptr[_UploadStatus]];
                    def room: ArchInt;
                    room = size * count;
                    if ((size == 0) or(count == 0) || ((size * count) < 1)) {
                        return 0;
                    }
                    def data: ptr[char];
                    def len: ArchInt;
                    len = uploadCtx~cnt.emailString.getLength();
                    data = uploadCtx~cnt.emailString.buf + uploadCtx~cnt.bytesRead;
                    if data != 0 and uploadCtx~cnt.bytesRead < len {
                        if room < len {
                            len = room;
                        }
                        Srl.Memory.copy(chunk, data, len);
                        uploadCtx~cnt.bytesRead += len;
                        Srl.Console.print("ver :%i \n", room);
                        return len;
                    }
                    return 0;
                }

                def uploadPoiner: _UploadStatus;
                uploadPoiner.bytesRead = 0;
                uploadPoiner.emailString = Srl.String.merge(emailArray, "\r\n");
                curlHandle = CurlEasy.init();
                if curlHandle == 0 return false;

                CurlEasy.setOpt(curlHandle, CurlOpt.USERNAME, emailArray(1).split(":")(1).buf);
                CurlEasy.setOpt(curlHandle, CurlOpt.PASSWORD, password);
                CurlEasy.setOpt(curlHandle, CurlOpt.URL, this.url.buf);

                CurlEasy.setOpt(curlHandle, CurlOpt.MAIL_FROM, emailArray(1).split(":")(1).buf);
                recipients = CurlSlist.append(recipients, emailArray(0).split(":")(1).buf);
                def i: int = 0;
                def ccArray: Array[Srl.String];
                ccArray = emailArray(2).split(":")(1).split(",");
                for i = 0, i < ccArray.getLength() - 1, i += 1
                    recipients = CurlSlist.append(recipients, ccArray(i).buf);
                CurlEasy.setOpt(curlHandle, CurlOpt.MAIL_RCPT, recipients);
                CurlEasy.setOpt(curlHandle, CurlOpt.USE_SSL, 3);
                CurlEasy.setOpt(curlHandle, CurlOpt.READFUNCTION, _smtpCallbackFunction~ptr);
                CurlEasy.setOpt(curlHandle, CurlOpt.READDATA, uploadPoiner~ptr);
                CurlEasy.setOpt(curlHandle, CurlOpt.USERAGENT, "ALUSUS NETWORK LIBRARY");
                CurlEasy.setOpt(curlHandle, CurlOpt.WRITEFUNCTION, responseCallback~ptr);
                CurlEasy.setOpt(curlHandle, CurlOpt.WRITEDATA, content~ptr);
                CurlEasy.setOpt(curlHandle, CurlOpt.UPLOAD, 1);
                CurlEasy.setOpt(curlHandle, CurlOpt.VERBOSE, 1);
                resultCode = CurlEasy.perform(curlHandle);
                CurlEasy.cleanup(curlHandle);
                if resultCode == CurlCode.OK return true;
                else return false;
            }

            handler.sendEmail(
                receivers: Srl.Array[Srl.String],
                sender: Srl.String,
                subject: Srl.String,
                body: Srl.String,
                bodyType: Srl.String,
                password: Srl.String
            ): bool {
                def emailArray: Array[Srl.String];
                emailArray.add(Srl.String("To:") + receivers(0));
                emailArray.add(Srl.String("From:") + sender);
                def i: int = 0;
                def ccString: Srl.String = "";
                for i = 1, i < receivers.getLength(), i += 1 {
                    ccString = ccString + receivers(i) + String(",");
                }
                emailArray.add(Srl.String("Cc: ") + ccString);
                emailArray.add(Srl.String("Subject: ") + subject);
                if bodyType == Srl.String("html") {
                    emailArray.add(Srl.String("Content-Type: text/html; charset=UTF-8"));
                }
                emailArray.add(Srl.String(""));
                emailArray.add(body);
                return this.smtp(emailArray, password.buf);
            }

            handler.get(): Bool {
                def curlHandle: ptr[Curl];
                def resultCode: Int;
                def result: ptr[ptr];
                def resultCount: ptr[Int];


                result~cnt = 0;
                resultCount~cnt = 0;

                def content: _Content;
                content.data = 0;
                content.size = 0;

                curlHandle = CurlEasy.init();
                if (curlHandle == 0) return false;

                CurlEasy.setOpt(curlHandle, CurlOpt.URL, this.url.buf);
                CurlEasy.setOpt(curlHandle, CurlOpt.HTTPGET, 1);
                def httpHeaders: ptr[CurlSlist] = 0;
                def contentTypeHeader: String = "";
                if this.authKey != String("") and this.authType == String("") {
                    CurlEasy.setOpt(curlHandle, CurlOpt.USERPWD, this.authKey.buf);
                } else if this.authKey != String("") {
                    def authHeader: String = "";

                    authHeader = String.format("Authorization: %s %s", this.authType, this.authKey);
                    httpHeaders = CurlSlist.append(httpHeaders, authHeader.buf);
                }
                contentTypeHeader = String.format("Content-Type: %s", this.contentType.buf);
                httpHeaders = CurlSlist.append(httpHeaders, contentTypeHeader.buf);
                CurlEasy.setOpt(curlHandle, CurlOpt.HTTPHEADER, httpHeaders);
                CurlEasy.setOpt(curlHandle, CurlOpt.HTTPHEADER, httpHeaders);
                CurlEasy.setOpt(curlHandle, CurlOpt.WRITEFUNCTION, responseCallback~ptr);
                CurlEasy.setOpt(curlHandle, CurlOpt.WRITEDATA, content~ptr);
                CurlEasy.setOpt(curlHandle, CurlOpt.USERAGENT, "ALUSUS NETWORK LIBRARY");
                CurlEasy.setOpt(curlHandle, CurlOpt.FOLLOWLOCATION, 1);
                CurlEasy.setOpt(curlHandle, CurlOpt.SSL_VERIFYPEER, 0);
                resultCode = CurlEasy.perform(curlHandle);
                CurlEasy.cleanup(curlHandle);
                if resultCode == CurlCode.OK {
                    // Zero terminate the data.
                    result~cnt = Srl.Memory.realloc(content.data, content.size + 1);
                    result~cnt~cast[ptr[array[Word[8]]]]~cnt(content.size) = 0;
                    resultCount~cnt = content.size;
                    this.result = String.format("%s", result);
                    return true;
                } else {
                    return false;
                }
            }
        }
    }
}

