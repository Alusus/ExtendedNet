
import "Srl/Net";
@merge module Srl {
    @merge module Net {
        class _Content {
            def data: ptr[array[Word[8]]];
            def size: Int;
        }

        func _getCallbackFunction(chunk: ptr, size: Int[64], count: Int[64], content: ptr[_Content]): Int {
            def newSize: Int;
            newSize = (content~cnt.size + size * count)~cast[Int];
            if content~cnt.data == 0 {
                content~cnt.data = Srl.Memory.alloc(newSize)~cast[ptr[array[Word[8]]]];
            } else {
                content~cnt.data = Srl.Memory.realloc(content~cnt.data, newSize)~cast[ptr[array[Word[8]]]];
            };
            Srl.Memory.copy(content~cnt.data~cnt(content~cnt.size)~ptr, chunk, size * count);
            content~cnt.size = newSize;
            return(size * count)~cast[Int];
        }

        func putFile(url: ptr[array[Char]], filename: ptr[array[Char]]): Bool {
            return putFile(url, filename, 0);
        }

        func putFile(url: ptr[array[Char]], filename: ptr[array[Char]], auth: ptr[array[Char]]): Bool {
            def curlHandle: ptr[Curl];
            def resultCode: Int;

            curlHandle = CurlEasy.init();
            if curlHandle == 0 return false;

            def file: ptr[Srl.Fs.File];
            file = Srl.Fs.openFile(filename, "rb");
            if file == 0 {
                CurlEasy.cleanup(curlHandle);
                return false;
            };

            Srl.Fs.seek(file, 0, 2);
            def size: ArchInt = Srl.Fs.tell(file);
            Srl.Fs.seek(file, 0, 0);
            CurlEasy.setOpt(curlHandle, CurlOpt.URL, url);
            if auth != 0 CurlEasy.setOpt(curlHandle, CurlOpt.USERPWD, auth);
            CurlEasy.setOpt(curlHandle, CurlOpt.UPLOAD, 1);
            CurlEasy.setOpt(curlHandle, CurlOpt.READDATA, file);
            CurlEasy.setOpt(curlHandle, CurlOpt.USERAGENT, "ALUSUS NETWORK LIBRARY");
            CurlEasy.setOpt(curlHandle, CurlOpt.INFILESIZE_LARGE, size);
            CurlEasy.setOpt(curlHandle, CurlOpt.VERBOSE, 1);
            resultCode = CurlEasy.perform(curlHandle);
            CurlEasy.cleanup(curlHandle);
            Srl.Fs.closeFile(file);
            if resultCode == CurlCode.OK return true
            else return false;
        }

        func post(url: ptr[array[Char]], filename: ptr[array[Char]], postedData: ptr[array[Char]]): Bool {
            return post(url, filename, postedData, 0);
        }

        func post(url: ptr[array[Char]], filename: ptr[array[Char]], postedData: ptr[array[Char]], auth: ptr[array[Char]]): Bool {
            def curlHandle: ptr[Curl];
            def resultCode: Int;
            curlHandle = CurlEasy.init();
            if curlHandle == 0 return false;
            def file: ptr[Srl.Fs.File];
            file = Srl.Fs.openFile(filename, "wb");
            if file == 0 {
                CurlEasy.cleanup(curlHandle);
                return false;
            };
            CurlEasy.setOpt(curlHandle, CurlOpt.URL, url);
            CurlEasy.setOpt(curlHandle, CurlOpt.POSTFIELDS, postedData);
            if auth != 0 CurlEasy.setOpt(curlHandle, CurlOpt.USERPWD, auth);
            CurlEasy.setOpt(curlHandle, CurlOpt.WRITEDATA, file);
            CurlEasy.setOpt(curlHandle, CurlOpt.USERAGENT, "ALUSUS NETWORK LIBRARY");
            CurlEasy.setOpt(curlHandle, CurlOpt.FOLLOWLOCATION, 1);
            CurlEasy.setOpt(curlHandle, CurlOpt.SSL_VERIFYPEER, 0);
            resultCode = CurlEasy.perform(curlHandle);
            CurlEasy.cleanup(curlHandle);
            Srl.Fs.closeFile(file);
            if resultCode == CurlCode.OK return true
            else return false;
        }

        func buildEmailString(reseviers: Srl.Array[Srl.String], sender: Srl.String, subject: Srl.String, body: Srl.String, textType: Srl.String): Array[Srl.String] {
            def emailArray: Array[Srl.String];
            emailArray.add(Srl.String("To:") + reseviers(0));
            emailArray.add(Srl.String("From:") + sender);
            def i: int = 0;
            def ccString: Srl.String = "";
            for i = 1, i < reseviers.getLength(), i += 1 {
                ccString = ccString + reseviers(i) + String(",");
            }
            emailArray.add(Srl.String("Cc: ") + ccString);
            emailArray.add(Srl.String("Subject: ") + subject);
            if textType == Srl.String("html") {
                emailArray.add(Srl.String("Content-Type: text/html; charset=UTF-8"));
            }
            emailArray.add(Srl.String(""));
            emailArray.add(body);
            return emailArray
        }

        func smtp(url: ptr[array[Char]], emailArray: Array[Srl.String], password: ptr[array[Char]]): Bool {
            def curlHandle: ptr[Curl];
            def resultCode: Int;
            def recipients: ptr[CurlSlist] = 0;
            def content: _Content;
            content.data = 0;
            content.size = 0;



            class _UploadStatus {
                def bytesRead: ArchInt;
                def emailString: String;
            }

            func _smtpCallbackFunction(chunk: ptr[char], size: ArchInt, count: ArchInt, userp: ptr): ArchInt {
                def uploadCtx: ptr[_UploadStatus]
                    uploadCtx = userp~cast[ptr[_UploadStatus]]
                    def room: ArchInt;
                room = size * count;
                if ((size == 0) or(count == 0) || ((size * count) < 1)) {
                    return 0;
                }
                def data: ptr[char]
                    def len: ArchInt;
                len = uploadCtx~cnt.emailString.getLength();
                data = uploadCtx~cnt.emailString.buf + uploadCtx~cnt.bytesRead;
                if data != 0 and uploadCtx~cnt.bytesRead < len {
                    if room < len {
                        len = room;
                    }
                    Srl.Memory.copy(chunk, data, len);
                    uploadCtx~cnt.bytesRead += len;
                    Srl.Console.print("ver :%i \n", room)
                        return len;
                }
                return 0;
            }

            //result~cnt = 0;
            //resultCount~cnt = 0;
            def uploadPoiner: _UploadStatus;
            uploadPoiner.bytesRead = 0;
            uploadPoiner.emailString = Srl.String.merge(emailArray, "\r\n");
            curlHandle = CurlEasy.init();
            if curlHandle == 0 return false;

            CurlEasy.setOpt(curlHandle, CurlOpt.USERNAME, emailArray(1).split(":")(1).buf);
            CurlEasy.setOpt(curlHandle, CurlOpt.PASSWORD, password);
            Console.print("pass : %s\n", password);
            Console.print("email : %s\n", emailArray(1).split(":")(1).buf);
            CurlEasy.setOpt(curlHandle, CurlOpt.URL, url);



            CurlEasy.setOpt(curlHandle, CurlOpt.MAIL_FROM, emailArray(1).split(":")(1).buf);
            recipients = CurlSlist.append(recipients, emailArray(0).split(":")(1).buf);
            def i: int = 0;
            def ccArray: Array[Srl.String];
            ccArray = emailArray(2).split(":")(1).split(",");
            for i = 0, i < ccArray.getLength() - 1, i += 1
                recipients = CurlSlist.append(recipients, ccArray(i).buf);
            CurlEasy.setOpt(curlHandle, CurlOpt.MAIL_RCPT, recipients);

            CurlEasy.setOpt(curlHandle, CurlOpt.USE_SSL, 3);

            CurlEasy.setOpt(curlHandle, CurlOpt.READFUNCTION, _smtpCallbackFunction~ptr);
            CurlEasy.setOpt(curlHandle, CurlOpt.READDATA, uploadPoiner~ptr);
            CurlEasy.setOpt(curlHandle, CurlOpt.USERAGENT, "ALUSUS NETWORK LIBRARY");
            CurlEasy.setOpt(curlHandle, CurlOpt.WRITEFUNCTION, _getCallbackFunction~ptr);
            CurlEasy.setOpt(curlHandle, CurlOpt.WRITEDATA, content~ptr);
            CurlEasy.setOpt(curlHandle, CurlOpt.UPLOAD, 1);
            CurlEasy.setOpt(curlHandle, CurlOpt.VERBOSE, 1);
            resultCode = CurlEasy.perform(curlHandle);
            CurlEasy.cleanup(curlHandle);
            //Srl.Fs.closeFile(file);
            if resultCode == CurlCode.OK {
                // Zero terminate the data.
                //result~cnt = Srl.Memory.realloc(content.data, content.size + 1);
                //result~cnt~cast[ptr[array[Word[8]]]]~cnt(content.size) = 0;
                //resultCount~cnt = content.size;
                return true;
            } else {
                return false;
            };
        }
    }
}

